@page "/"
@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase

<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />

<EditForm Model="@model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <MudCard Style="width: 250px" Class="mb-3">
        <MudCardContent>
            <MudTextField
                T="string"
                Immediate="true"
                OnKeyDown="HandleKeyDown"
                KeyDownPreventDefault="_preventDefault"
                TextUpdateSuppression="false"
                @bind-Value="model.Prompt"
                Placeholder="Type a message..."
                Variant="Variant.Filled"
                For="@(() => model.Prompt)"
                AutoGrow
                MaxLines="14"
                TextChanged="TextChangedTest"/>
        </MudCardContent>
        <MudCardActions Class="pt-0">
            <MudSpacer/>
            <MudTooltip Text="Submit">
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Send" Size="Size.Small" Color="Color.Primary"></MudIconButton>
            </MudTooltip>
        </MudCardActions>
    </MudCard>
    @foreach (var message in messages) {
        <div>@message</div>
    }
</EditForm>

@code {
    bool _preventDefault;
    List<string> messages = new();
    PromptForm model = new PromptForm();

    public class PromptForm
    {
        [Required]
        public string Prompt { get; set; }
    }

    protected void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            _preventDefault = true;
            Submit();
        }
        else
        {
            _preventDefault = false;
        }
    }

    public void Submit()
    {
        messages.Add($"Prompt: {model.Prompt}");
        model.Prompt = string.Empty;
        StateHasChanged();
    }

    public void TextChangedTest(string text)
    {
        messages.Add($"Text changed: '{text}'");
    }
}
